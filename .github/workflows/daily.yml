name: Daily Security and Quality Checks

on:
  schedule:
    - cron: '0 0 * * *' # This cron expression triggers the workflow at 12:00 AM UTC every day

jobs:
  setup:
    name: Set up Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.22'

  code-coverage:
    name: Code Coverage
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cover Tool
        run: go get github.com/mattn/goveralls

      - name: Run Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          goveralls -coverprofile=coverage.out -service=github

  code-quality:
    needs: setup
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.38.0

  docker-simulation:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Simulate Docker Build
        run: |
          ln -s .docker/.dockerignore .dockerignore
          docker build -f .docker/Dockerfile --target simulate -t temp-image .
      - name: Remove Images
        run: docker rmi temp-image

  sast:
    needs: setup
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Gosec
        run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s latest
          sudo mv gosec /usr/local/bin/gosec

      - name: Run Gosec
        run: |
          gosec -fmt=json -out=gosec_report.json ./...

      - name: Upload Gosec Report
        uses: actions/upload-artifact@v2
        with:
          name: gosec-report
          path: gosec_report.json

  dast:
    needs: [docker-simulation,sast]
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          ln -s .docker/.dockerignore .dockerignore
          docker build -f .docker/Dockerfile --target simulate -t temp-image .

      - name: Run application container
        run: docker run -d -p 8080:8080 --name temp_container temp-image

      - name: Wait for the application to be ready
        run: |
          echo "Waiting for the application to start..."
          sleep 30 # Adjust this duration based on your application's startup time

      - name: Verify application is running
        run: |
          if curl -s http://localhost:8080 | grep -q "Expected string or pattern"; then
            echo "Application is running"
          else
            echo "Application failed to start"
            exit 1
          fi

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: 'http://localhost:8080'

      - name: Stop and remove application container
        run: docker stop temp_container && docker rm temp_container

      - name: Remove Docker image
        run: docker rmi temp-image